---
title: "Revealjs 演示文稿"
slide-format: revealjs
---

## 概览

你可以使用 `revealjs` 格式来创建 [Revealjs](https://revealjs.com/)演示文稿。了解 Revealjs 功能的最佳方式是通过这个 [示例](demo/){target="_blank"} 演示文稿：

```{=html}
<style>
.slide-deck {
    border: 3px solid #dee2e6;
    width: 100%;
    height: 475px;
}

@media only screen and (max-width: 600px) {
 .slide-deck {
    height: 400px;
  }
}
</style>
```

<div>

```{=html}
<iframe class="slide-deck" src="demo/"></iframe>
```

</div>

如果你喜欢在独立浏览器窗口中查看演示，你可以直接点击[链接](demo/){target="_blank"}。你还可以进一步查看演示的[源代码](https://github.com/quarto-dev/quarto-web/blob/main/docs/presentations/revealjs/demo/index.qmd)以了解该示例幻灯片是如何创建的。

有关 Revealjs 输出格式支持的所有选项的全面概述，请参阅 [Revealjs格式参考](https://quarto.org/docs/reference/formats/presentations/revealjs.html)。

{{< include _creating-slides-reveal.md >}}

{{< include _incremental-lists-reveal.md >}}

{{< include _incremental-pause-reveal.md >}}

{{< include _columns-reveal.md >}}


## 内容溢出

如果幻灯片中的内容多于单个页面上可以显示的内容，那么可以使用两个幻灯片级别的类设定来缓解这一情况：

1. 设定 `.smaller` 类使用较小的字体，以便幻灯片上可以容纳更多文本。例如：

    ``` {.markdown code-preview="examples/smaller.qmd"}
    ## 幻灯片标题 {.smaller}
    ```

2.  设定 `.scrollable` 类，通过滚动来查看幻灯片外的内容。例如：

    ``` {.markdown code-preview="examples/scrollable.qmd"}
    ## 幻灯片标题 {.scrollable}
    ```

这两个选项也可以全局应用于所有幻灯片，如下所示：


``` {.yaml code-preview="examples/scrollable-and-smaller.qmd"}
---
format:
  revealjs:
    smaller: true
    scrollable: true
---
```

{{< include _speaker-notes.md >}}

按 <kbd>S</kbd> 键（或使用[导航菜单](presenting.qmd#navigation-menu)）来显示演示者视图，图示如下：

![](images/speaker-view.png){.border fig-alt="Screenshot of reveal.js presentation in Speaker View. On the right, the active slide is shown. The left column contains three sections which show (from top to bottom): the upcoming slide, time (both elapsed and clock time), and a section where speaker notes go."}

你通常会在一个屏幕（例如笔记本电脑）上使用演示者视图，同时在另一个屏幕上演示幻灯片。


## 主题

{{< include _theme-basics.md >}}

有关自定义主题和创建全新主题的更多详细信息，请参阅 [Revealjs 主题](themes.qmd)。


## 批注和脚注

批注用来展示次要信息，以更小、更浅的字体显示在幻灯片底部。使用指定类为 `aside` 的 div块来创建批注。例如：

``` markdown
## 幻灯片标题

幻灯片内容

::: aside
用来展示更多次要信息的批注（吧啦吧啦 ~~）
:::
```

脚注与批注有着类似的视觉处理，但包括脚注编号。例如，我们在单页幻灯片上同时使用脚注和批注：

```{.markdown code-preview="/readings/revealjs/examples/slide-with-footnotes.qmd"}
## 附有脚注和批准的幻灯片

- 绿色 ^[脚注内容]
- 棕色
- 紫色

::: aside
含有更多边缘信息的附加批注（吧啦吧啦 ~~）
:::
```

如果你希望在文档末尾包含脚注，请指定选项 `reference-location: document`：

``` yaml
---
format:
  revealjs:
    reference-location: document
---
```

请注意，指定此选项，你可以通过将鼠标悬停在脚注编号上来查看相应的脚注内容。


## 页脚和徽标

你可以使用 `footer` 和 `logo` 选项在每页幻灯片的底部添加页脚文本和徽标。例如：

``` {.yaml code-preview="examples/footer-and-logo.qmd"}
---
format:
  revealjs:
    logo: logo.png
    footer: "页脚文本"
---
```

你还可以通过在特定幻灯片底部添加页脚div块来为该页幻灯片添加自定义的页脚文本：

``` {.markdown code-preview="examples/per-slide-footer.qmd"}
## 幻灯片标题

幻灯片内容

::: footer
自定义的页脚文本
:::
```


## 代码块

Quarto [HTML代码块](https://quarto.org/docs/output-formats/html-code.html)的大多数核心功能均适用于 Reveal 演示文稿，包括代码折叠、代码复制以及选择自定义语法突显主题的功能。请注意，如果你选择深色的 Reveal 主题，则将使用默认的 Quarto 深色语法突显主题。

### 行突出显示

你可能想要突出显示代码输出块的特定行（或者甚至突出显示一系列演示步骤中的不同行），此时你可通过设置代码块的 `code-line-numbers` 属性来达到这一目的。例如：

```` {.java code-preview="examples/line-highlighting-1.qmd"}
```{.python code-line-numbers="6-8"}
import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```
````

你还可以通过用逗号分隔来突出显示不同范围的行。例如：

```` {.java code-preview="examples/line-highlighting-2.qmd"}
```{.python code-line-numbers="7,9"}
import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```
````

最后，你可以通过 `|` 分隔来渐进增量突出显示不同的代码行。例如，在下面代码中我们首先显示所有行，然后突出显示第 6 行，最后突出显示第 9 行：

```` {.java code-preview="examples/line-highlighting-3.qmd"}
```{.python code-line-numbers="|6|9"}
import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```
````

你也可以在可执行单元格中使用相同的 `code-line-numbers` 选项来达到相同的效果：

```` {.java code-preview="examples/line-highlighting-4.qmd"}
```{{python}}
#| code-line-numbers: "|6|9"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```
````

## 可执行代码

你可以在幻灯片上包含可执行代码块的输出，就像使用其他 Quato 文档一样。具体工作原理与其他格式输出基本相同，但也有一些特殊注意事项，说明如下：

### 图形尺寸

你往往需要自定义为幻灯片创建的图形的大小，以便它们能够填充整个幻灯片或者指定区域。Quarto 在这里提供了一些帮助：对于 Python 来说，[Matplotlib](https://matplotlib.org/) 和 [Plotly Express](https://plotly.com/python/plotly-express/) 的图形大小被设置为填满标题下方的幻灯片区域，而对于 R 来说，Knitr 生成图形的宽度和高度也采用类似的默认值。

尽管如此，你可能还是需要更改给定图片尺寸的这些默认值，具体做法因图形库的不同而有所差异。以下是显性调整 [Altair](https://altair-viz.github.io/) 图片大小的示例：

``` {.python code-preview="examples/executable-code-figure-size.qmd"}
alt.Chart(cars).mark_point().encode(
    x='Horsepower',
    y='Miles_per_Gallon',
    color='Origin',
).properties(
    width=700,
    height=300
).interactive()
```

### 显示代码

与普通文档不同，Quarto 演示文稿中的可执行代码块在默认情况下并不显示源代码（这是由于这些代码通常会生成需要占据尽可能多垂直空间的图形）。你可以通过设置 `echo` 选项修改这一默认做法，如下所示：

```` {.java code-preview="examples/code-echo.qmd"}
```{{python}}
#| echo: true

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={"projection": "polar"})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```
````

### 输出位置

默认情况下，可执行代码块的输出结果直接显示在代码之后。你可以通过设置 `output-location` 选项来修改此行为，具体选项如下所示：

|                   |                                                                              |
|-------------------|------------------------------------------------------------------------------|
| `fragment`        | 将输出结果显示为分片（会延迟显示并随着幻灯片推进而增量展示）                 |
| `slide`           | 将输出结果显示在下一页幻灯片                                                 |
| `column`          | 将输出结果显示为与源代码并列的分栏                                           |
| `column-fragment` | 将输出结果显示为与源代码并列的分栏并延迟显示它，随着幻灯片的推进而增量展示   |

例如，我们将可执行单元格的输出结果在单独的幻灯片上展示：

```{{r}}
#| echo: true
#| output-location: slide
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) + 
  geom_point() + 
  geom_smooth(method = "loess")
```

关于设置代码块执行结果输出方式的其他方法的更多详细信息，请参阅文档 [执行选项](https://quarto.org/docs/computations/execution-options.html)。

## 标签页

你可以使用 Quarto 设置 [标签页](https://quarto.org/docs/output-formats/html-basics.html#tabsets) 的标准语法 将标签页添加到幻灯片中。例如：

``` {.markdown code-preview="examples/tabset.qmd"}
::: {.panel-tabset}

### 标签页A

`标签页A`的内容

### 标签页B

`标签页B`的内容

:::
```

需要注意的是，标签页幻灯片的一个突出缺点是打印为 PDF 时只有第一个标签页是可见的。


## 幻灯片背景

默认情况下，幻灯片显示在屏幕的限定区域内并允许它们均匀缩放以适应不同显示屏的尺寸。你可以通过向幻灯片标题添加 `background` 相关属性来给幻灯片增加满幅的背景。Quarto | Revealjs 支持四种不同类型的背景：颜色、图像、视频和 iframe（内联框架）。

支持所有 CSS 颜色格式，包括十六进制值、关键字、`rgba()` 和 `hsl()`。例如：

``` {.markdown code-preview="examples/background-color.qmd"}
## 幻灯片标题 {background-color="aquamarine"}
```

你还可以使用各种类型的媒体（图像、视频或内联框架等）作为幻灯片背景，具体如下所述：

::: {.callout-tip appearance="simple"}
注意，如果嵌入媒体的背景颜色与演示文稿的主题不同（例如，在浅色主题时使用深色图像），那么你还应该明确设置 `background-color` 选项，以便在深色背景上面的文本能以正确的颜色显示（例如，深色背景上的浅色文本）。
:::

### 图像背景

默认情况下，背景图像会自动调整大小以覆盖整个页面。可用选项包括：

| **属性**              | **默认值**| **说明**                                  |
|:----------------------|:----------|:------------------------------------------|
| `background-image`    |           | 图像的 URL；打开幻灯片时，GIF 会重新开始  |
| `background-size`     | cover     | 参见 MDN 上的 [background-size](https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-size) |
| `background-position` | center    | 参见 MDN 上的 [background-position](https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-position) |
| `background-repeat`   | no-repeat | 参见 MDN 上的 [background-repeat](https://developer.mozilla.org/zh_CN/docs/Web/CSS/background-repeat) |
| `background-opacity`  | 1         | 背景图像的不透明度（0-1 级，0为透明，1为完全不透明） |

示例如下：

``` {.markdown code-preview="examples/image-background.qmd"}
## 幻灯片标题 {background-color="black" background-image="https://placekitten.com/100/100" background-size="100px" background-repeat="repeat"}

该幻灯片的背景图像的大小将调整为 100 像素并重复。

```

由于背景图像的颜色为深色，而幻灯片的默认主题为浅色，因此我们需要把背景颜色 `background-color` 显性设置为黑色，以便将在叠加其上的文本显示成浅色。

### 视频背景

Quarto|Revealjs 会自动全屏播放背景视频。

{{< include _background-video.md >}}

### 内联框架背景

将网页嵌入为幻灯片背景，覆盖 100% 的 reveal.js 宽度和高度。iframe 位于幻灯片后面的背景层中，因此默认情况下演示者无法与其交互。要使背景具备交互性，你需要修改 `background-interactive` 属性。

| **属性**            | **默认值** | **说明**                                     |
|:--------------------|:-----------|:---------------------------------------------|
| `background-iframe` |            | 拟加载内联框架的 URL 地址                    |
| `background-interactive` | false | 标识是否可与 iframe 内容进行交互（启用此功能将阻止演示者与幻灯片内容进行交互）                        |

示例如下：

``` markdown
## 幻灯片标题 {background-iframe="https://example.com"}
```

### 没有标题的幻灯片背景

你可以省略标题文本，而仅仅指定幻灯片背景信息，如：

``` {.markdown code-preview="examples/background-no-title.qmd"}
## {background-color="aquamarine"}

（没有标题的一页幻灯片）

## {background-color="black" background-image="https://placekitten.com/100/100" background-size="100px" background-repeat="repeat"}

（没有标题的另一页幻灯片）
```

### 主标题幻灯片背景

主标题幻灯片是第一页幻灯片，它是通过文档的 YAML 选项自动生成的。因此，上述方法无法为主标题幻灯片提供背景。相反，你需要执行以下操作：

1. 增加主标题幻灯片的背景选项 `title-slide-attributes`
2. 在相应背景选项的前面增加 `data-`

例如：

```yaml
---
title: My Slide Show
title-slide-attributes:
    data-background-image: /path/to/title_image.png
    data-background-size: contain
    data-background-opacity: "0.5"
---
```

## 了解更多

请参阅以下文章了解关于 Revealjs 的更多高级功能：

- [幻灯片演示](presenting.qmd) 介绍了幻灯片导航、打印为 PDF、使用板书工具以及创建同步演示幻灯片。
- [高级Reveal](advanced.qmd) 深入研究        切换、动画、高级布局与定位以及可用于自定义演示文稿的其他选项。
- [Reveal主题](themes.qmd) 讨论如何使用和自定义现有主题以及如何创建全新主题。

